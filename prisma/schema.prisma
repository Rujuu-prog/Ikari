datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  site         Site[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// データ取得対象のサイト情報
model Site {
  id          String   @id @default(cuid())
  userId      String
  name        String
  url         String
  target      Target[]
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 一人のユーザーが同じURLを取得できないようにする
  @@unique([userId, url])
}

// 取得先のサイトの情報
model Target {
  id          String   @id @default(cuid())
  siteId      String
  // 取得したい要素のセレクタ
  element     String
  // 期待する要素の値(optional)
  expected    String?
  resultId    Result[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  site Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

// Targetテーブルの取得結果
model Result {
  id          String   @id @default(cuid())
  targetId    String
  // 取得した要素の値
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  target Target @relation(fields: [targetId], references: [id], onDelete: Cascade)
}